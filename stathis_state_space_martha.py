# -*- coding: utf-8 -*-
"""Stathis State Space.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RvnrnKOnyGvvy_BALbB29gMdyGgHibVC
"""

import tensorflow as tf
import torch
import numpy as np
import pandas as pd
import math

SP500       = pd.read_csv('/content/SP500 dec2004-dec2018.csv')
StathisData = pd.read_csv('/content/Final Stathis Data.csv')

SP_prices = SP500.loc[:,'Close']
SPprices = torch.tensor(SP_prices)

data  = SPprices
data1 = SP_prices
t     = 252

### FUNCTION ONE !! ##
# NORMALIZED PRICES

def NormalizedPrice(data,t):
  
  mu           = torch.mean(data)
  sigma        = torch.std(data)
  NormalPrices = (data-mu)/sigma
  NormalPrice = NormalPrices[t]

  return(NormalPrice)

# TESTING FUNCTION ONE
# NormalizedPrice(data,t)
# = tensor(-0.7582, dtype=torch.float64)

### FUNCTION TWO !! ##
# NORMALIZED RETURNS

def NormalizedReturns(data,t):

  Return1month = (data[t]-data[t-30])/data[t-30]
  Return2month = (data[t]-data[t-60])/data[t-60]
  Return3month = (data[t]-data[t-90])/data[t-90]
  Return1year  = (data[t]-data[t-252])/data[t-252]

  #TotalReturn1mth = (data[29:(t+1)]-data[0:(t-28)])/data[0:(t-28)]
  #TotalReturn2mth = (data[59:(t+1)]-data[0:(t-58)])/data[0:(t-58)]
  #TotalReturn3mth = (data[89:(t+1)]-data[0:(t-88)])/data[0:(t-88)]
  #TotalReturn1yr  = (data[251:(t+1)]-data[0:(t-250)])/data[0:(t-250)]

  #sd1month = torch.std(TotalReturn1mth)
  #sd2month = torch.std(TotalReturn2mth)
  #sd3month = torch.std(TotalReturn3mth)
  #sd1year  = torch.std(TotalReturn1yr)

  #mu1month = torch.mean(TotalReturn1mth)
  #mu2month = torch.mean(TotalReturn2mth)
  #mu3month = torch.mean(TotalReturn3mth)
  #mu1year  = torch.mean(TotalReturn1yr)

  TotalReturn = (data[1:(t+1)]-data[0:t])/data[0:t]
  df = pd.DataFrame(TotalReturn)

  EWSTD1month = df.ewm(span=5).std()
  EWSTD2month = df.ewm(span=10).std()
  EWSTD3month = df.ewm(span=15).std()
  EWSTD1year  = df.ewm(span=60).std()

  EWSTD1month1 = tf.convert_to_tensor(EWSTD1month)
  EWSTD2month1 = tf.convert_to_tensor(EWSTD2month)
  EWSTD3month1 = tf.convert_to_tensor(EWSTD3month)
  EWSTD1year1  = tf.convert_to_tensor(EWSTD1year)

  sd1month = EWSTD1month1[[t-1]]
  sd2month = EWSTD2month1[[t-1]]
  sd3month = EWSTD3month1[[t-1]]
  sd1year  = EWSTD1year1[[t-1]]

  FinalReturn1month = Return1month/(sd1month*math.sqrt(30))
  FinalReturn2month = Return2month/(sd2month*math.sqrt(60))
  FinalReturn3month = Return3month/(sd3month*math.sqrt(90))
  FinalReturn1year  = Return1year/(sd1year*math.sqrt(252))

  #FinalReturn1month = (Return1month-mu1month)/sd1month
  #FinalReturn2month = (Return2month-mu2month)/sd2month
  #FinalReturn3month = (Return3month-mu3month)/sd3month
  #FinalReturn1year  = (Return1year-mu1year)/sd1year

  NormalReturns = [FinalReturn1month,FinalReturn2month,FinalReturn3month,FinalReturn1year]

  return(tf.convert_to_tensor(NormalReturns))

# TESTING FUNCTION TWO
# NormalizedReturns(data,t)
# <tf.Tensor: shape=(4, 1), dtype=float64, numpy=
# array([[0.54612303],
#        [1.55532359],
#        [1.74047306],
#        [0.87260777]])>

### FUNCTION THREE !! ##
# MACD

def MACD(data,t):

  StdRoll63days  = torch.std(data[(t-63):(t+1)])
  StdRoll252days = torch.std(data[(t-252):(t+1)])

  data1 = data[0:(t+1)]
  df    = pd.DataFrame(data1)

  EWMA1short = df.ewm(span=8).mean()
  EWMA2short = df.ewm(span=16).mean()
  EWMA3short = df.ewm(span=32).mean()
  EWMA1long  = df.ewm(span=24).mean()
  EWMA2long  = df.ewm(span=48).mean()
  EWMA3long  = df.ewm(span=96).mean()

  EWMA1short1 = tf.convert_to_tensor(EWMA1short)
  EWMA2short1 = tf.convert_to_tensor(EWMA2short)
  EWMA3short1 = tf.convert_to_tensor(EWMA3short)
  EWMA1long1  = tf.convert_to_tensor(EWMA1long)
  EWMA2long1  = tf.convert_to_tensor(EWMA2long)
  EWMA3long1  = tf.convert_to_tensor(EWMA3long)

  MAvec = [EWMA1short1[[t]],
           EWMA2short1[[t]],
           EWMA3short1[[t]],
           EWMA1long1[[t]],
           EWMA2long1[[t]],
           EWMA3long1[[t]]]


  q = [ (MAvec[0]-MAvec[3])/StdRoll63days,
        (MAvec[0]-MAvec[4])/StdRoll63days,
        (MAvec[0]-MAvec[5])/StdRoll63days,
        (MAvec[1]-MAvec[3])/StdRoll63days,
        (MAvec[1]-MAvec[4])/StdRoll63days,
        (MAvec[1]-MAvec[5])/StdRoll63days,
        (MAvec[2]-MAvec[3])/StdRoll63days,
        (MAvec[2]-MAvec[4])/StdRoll63days,
        (MAvec[2]-MAvec[5])/StdRoll63days  ]

  MACDvec = tf.divide(q,StdRoll252days)

  MACD = (MACDvec[0]+MACDvec[1]+MACDvec[2]+MACDvec[3]+MACDvec[4]+MACDvec[5]+MACDvec[6]+MACDvec[7]+MACDvec[8])/9

  return(tf.convert_to_tensor(MACD))

# TESTING FUNCTION THREE
# MACD(data,t)
# <tf.Tensor: shape=(1,), dtype=float64, numpy=array([0.01859543])>

### FUNCTION FOUR !! ##
# RSI INDICATOR

def computeRSI (data, time_window):
    diff = data.diff(1).dropna()        # diff in one field(one day)

    #this preservers dimensions off diff values
    up_chg = 0 * diff
    down_chg = 0 * diff
    
    # up change is equal to the positive difference, otherwise equal to zero
    up_chg[diff > 0] = diff[ diff>0 ]
    
    # down change is equal to negative deifference, otherwise equal to zero
    down_chg[diff < 0] = diff[ diff < 0 ]
    
    # check pandas documentation for ewm
    # https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ewm.html
    # values are related to exponential decay
    # we set com=time_window-1 so we get decay alpha=1/time_window
    up_chg_avg   = up_chg.ewm(com=time_window-1 , min_periods=time_window).mean()
    down_chg_avg = down_chg.ewm(com=time_window-1 , min_periods=time_window).mean()
    
    rs = abs(up_chg_avg/down_chg_avg)
    rsi = 100 - 100/(1+rs)
    #RSI = torch.tensor(rsi)

    return rsi

# TESTING FUNCTION FOUR
# test = computeRSI(data1, 30)[t]
# torch.tensor(test)
# tensor(59.0129, dtype=torch.float64)





